apply plugin: 'com.android.application'
apply plugin: 'base'
apply plugin: "jacoco"
apply plugin: 'maven'
apply plugin: 'distribution'
apply plugin: "org.sonarqube"
apply plugin: 'com.github.triplet.play'


def code = System.getenv("BUILD_NUMBER") as Integer ?: 0
android {

playAccountConfigs {
        defaultAccountConfig {
            serviceAccountEmail = "svm2k20@gmail.com"
            jsonFile = file("../api-8324249604290713559-111702-2968b6cfa996.json")
        }
    }
    compileSdkVersion 26
    buildToolsVersion "26.0.1"
    defaultConfig {
        applicationId "com.cloudaeon.abhishek.courtcounter"
        minSdkVersion 15
        targetSdkVersion 26
        versionCode System.getenv("BUILD_NUMBER") as Integer ?: 0
        versionName "2.0"
        testInstrumentationRunner "android.support.test.runner.AndroidJUnitRunner"
        multiDexEnabled true
        playAccountConfig = playAccountConfigs.defaultAccountConfig
    }
    
    signingConfigs {
        release {
            storeFile file("../release.keystore")
            storePassword "Cloudaeon@2020"
            keyAlias "example"
            keyPassword "Cloudaeon@2020"
        }
    }
    
    buildTypes {
        release {
            signingConfig signingConfigs.release
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }
        
        debug {
            testCoverageEnabled  true
        }
    }
}

play {
    track = 'alpha'
    serviceAccountEmail = "svm2k20@gmail.com"
    pk12File = file('../release.p12')
    uploadImages = true
}


repositories {
    mavenCentral()
}


dependencies {
    compile fileTree(dir: 'libs', include: ['*.jar'])
    compile 'com.android.support:appcompat-v7:26.+'
    compile 'com.android.support.constraint:constraint-layout:1.0.2'
    compile 'com.android.support:support-annotations:25.3.1'
    compile 'com.google.android.gms:play-services:+'
    androidTestCompile('com.android.support.test.espresso:espresso-core:2.2.2', {
        exclude group: 'com.android.support', module: 'support-annotations'
    })
}


/*dependencies {
    compile fileTree(include: ['*.jar'], dir: 'libs')
    compile 'com.android.support:appcompat-v7:26.+'
    compile 'com.android.support.constraint:constraint-layout:1.0.2'
    testCompile 'junit:junit:4.12'
    compile 'com.android.support:support-annotations:24.2.0'
    androidTestCompile 'com.android.support.test:runner:1.0.2'
    androidTestCompile 'com.android.support.test.espresso:espresso-core:3.0.2'
    androidTestCompile 'com.android.support.test:rules:1.0.2'
}*/

distributions {
    main {
        baseName = 'CourtCounter'
        version = '2.0.'+ code
        contents {
            from { '/var/jenkins_home/workspace/CourtCounter/app/build/outputs/apk/app-debug.apk' }
        }
    }

}

uploadArchives {
    repositories {
        mavenDeployer {
            repository(url: "http://192.168.50.38:8081/repository/android/") {
                authentication(userName: nexusUsername, password: nexusPassword)
            }
        }
    }
}

tasks.distTar.enabled = false

configurations.archives.with {
    artifacts.remove artifacts.find { it.archiveTask.is distTar }
}

def coverageSourceDirs = [
    'src/main/java',
]

task jacocoTestReport(type: JacocoReport, dependsOn: "connectedDebugAndroidTest") {
  group = "Reporting"
  description = "Generate Jacoco coverage reports after running tests."
  reports {
    xml.enabled = true
    html.enabled = true
  }
  classDirectories = fileTree(
      dir: './build/intermediates/classes/debug',
      excludes: ['**/R*.class',
                 '**/*$InjectAdapter.class',
                 '**/*$ModuleAdapter.class',
                 '**/*$ViewInjector*.class'
      ])
  sourceDirectories = files(coverageSourceDirs)
  executionData = files("/var/jenkins_home/workspace/CourtCounter/app/build/outputs/code-coverage/connected/hudson_en-US_420_1080x1920_android-22_armeabi-v7a(AVD) - 5.1.1-coverage.ec")
  
  }

sonarqube {
    properties {
        def libraries = project.android.sdkDirectory.getPath() + "/platforms/android-22/android.jar"/* + ", build/intermediates/exploded-aar*//**//*classes.jar"*/
        property "sonar.sources", "src/main/java"
        property "sonar.binaries", "/var/jenkins_home/workspace/CourtCounter/app/build/intermediates/classes/debug"
        property "sonar.libraries", libraries
        property "sonar.tests", "src/androidTest/java"
        property "sonar.java.test.binaries", "/var/jenkins_home/workspace/CourtCounter/app/build/intermediates/classes/debug"
        property "sonar.java.test.libraries", libraries
        property "sonar.jacoco.reportPaths", "/var/jenkins_home/workspace/CourtCounter/app/build/outputs/code-coverage/connected/hudson_en-US_420_1080x1920_android-22_armeabi-v7a(AVD) - 5.1.1-coverage.ec"
        property "sonar.java.coveragePlugin", "jacoco"
        //property "sonar.junit.reportsPaths", "build/test-results/debug"
        property "sonar.android.lint.report", "/var/jenkins_home/workspace/CourtCounter/app/build/reports/lint-results.xml"
    }

}
